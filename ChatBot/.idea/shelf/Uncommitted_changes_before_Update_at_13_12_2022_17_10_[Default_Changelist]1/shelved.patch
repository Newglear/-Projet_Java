Index: src/main/java/NetworkReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.google.gson.Gson;\n\nimport javax.xml.crypto.Data;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport java.sql.SQLException;\nimport java.util.Arrays;\n\npublic class NetworkReceiver extends Thread {\n    Gson gson = new Gson();\n    private DatagramSocket recvSock;\n\n    NetworkReceiver(String id){\n        super(id);\n        System.out.println(\"====== RECEIVING THREAD INITIATED ======\");\n        start();\n    }\n\n    @Override\n    public void run() {\n        Receive();\n\n    }\n    private void Receive(){\n        try {\n            recvSock = new DatagramSocket(1234);\n        } catch (SocketException e) {\n            throw new RuntimeException(e);\n        }\n        byte[] buffer = new byte[256];\n        DatagramPacket inPacket = new DatagramPacket(buffer, buffer.length);\n        while(true){\n            try {\n                System.out.println(\"Attente de réception\");\n                recvSock.receive(inPacket);\n                String var = new String(inPacket.getData(), 0, inPacket.getLength());\n                NetworkMessage msg = gson.fromJson(var, NetworkMessage.class);\n                switch (msg.getMode()){\n                    case UserInfos:\n                        Receive_Infos(msg.getObject());\n                        break;\n                    case Nickname:\n                        Receive_Nickname(msg.getObject());\n                        break;\n                    case Disconnect:\n                        Receive_Disconnect(msg.getObject());\n                        break;\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n\n    public void Receive_Infos(String obj){\n        User usr = gson.fromJson(obj, User.class);\n        System.out.println(usr);\n        try{\n            DatabaseManager.Insert(usr);\n        } catch (SQLException s){\n            System.out.println(s);\n        }\n    }\n    public void Receive_Nickname(String obj){\n        User usr = gson.fromJson(obj, User.class);\n        System.out.println(\"Changement de pseudo entrant \" + usr.getPseudo() );\n        try {\n            DatabaseManager.Update(usr);\n        } catch ( SQLException s){\n            System.out.println(s);\n        }\n    }\n    public void Receive_Disconnect(String obj){\n        User usr = gson.fromJson(obj, User.class);\n        System.out.println(obj);\n\n        try{\n            DatabaseManager.Remove(usr);\n        }catch (SQLException s){\n            System.out.println(s);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/NetworkReceiver.java b/src/main/java/NetworkReceiver.java
--- a/src/main/java/NetworkReceiver.java	
+++ b/src/main/java/NetworkReceiver.java	
@@ -58,7 +58,7 @@
 
     public void Receive_Infos(String obj){
         User usr = gson.fromJson(obj, User.class);
-        System.out.println(usr);
+        System.out.println("Nouvel Utilisateur "+usr);
         try{
             DatabaseManager.Insert(usr);
         } catch (SQLException s){
@@ -76,7 +76,7 @@
     }
     public void Receive_Disconnect(String obj){
         User usr = gson.fromJson(obj, User.class);
-        System.out.println(obj);
+        System.out.println("Déconnexion de " + obj);
 
         try{
             DatabaseManager.Remove(usr);
Index: src/main/java/MainReceive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/MainReceive.java b/src/main/java/MainReceive.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/MainReceive.java	
@@ -0,0 +1,6 @@
+public class MainReceive {
+    public static void main(String[] args) {
+        DatabaseManager db = new DatabaseManager();
+        NetworkReceiver r = new NetworkReceiver("R1");
+    }
+}
Index: src/main/java/NetworkSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.google.gson.Gson;\n\nimport java.io.IOException;\nimport java.net.*;\n\npublic class NetworkSender{\n    private final DatagramSocket senderSock;\n    Gson gson= new Gson();\n    private final byte[] broadcastAddr= {10,32,(byte)47, (byte) 255};\n    NetworkSender(User infos,Types.UDPMode mode) throws SocketException {\n            senderSock = new DatagramSocket();\n            senderSock.setBroadcast(true);\n            try{\n                switch (mode){\n                    case Nickname:\n                        Send_Nickname(infos);\n                        break;\n                    case UserInfos:\n                        Send_User_Infos(infos);\n                        break;\n                    case Disconnect:\n                        Disconnect(infos);\n                        break;\n                }\n            }catch (IOException e){\n                System.out.println(\"Message error\");\n            }\n    }\n\n\n    public void Send_User_Infos(User usr) throws IOException {\n        System.out.println(\"===== Phase d'envoi =====\");\n        String user = gson.toJson(usr);\n        String msg =gson.toJson( new NetworkMessage(Types.UDPMode.UserInfos, user));\n        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByAddress(broadcastAddr), 1234);\n        System.out.println(\"Envoi des infos\");\n        senderSock.send(outPacket);\n        System.out.println(\"Infos Envoyées\");\n        System.out.println(\"===== Fin d'envoi =====\");\n        senderSock.close();\n    }\n    public void Send_Nickname(User usr) throws IOException {\n\n        System.out.println(\"===== Phase d'envoi =====\");\n        String msg =gson.toJson( new NetworkMessage(Types.UDPMode.Nickname, gson.toJson(usr)));\n        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByAddress(broadcastAddr), 1234);\n        System.out.println(\"Envoi des infos\");\n        senderSock.send(outPacket);\n        System.out.println(\"Infos Envoyées\");\n        System.out.println(\"===== Fin d'envoi =====\");\n        senderSock.close();\n    }\n    public void Disconnect(User usr) throws IOException {\n        System.out.println(\"===== Phase d'envoi =====\");\n        String msg =gson.toJson( new NetworkMessage(Types.UDPMode.Disconnect, gson.toJson(usr)));\n        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByAddress(broadcastAddr), 1234);\n        System.out.println(\"Envoi des infos\");\n        senderSock.send(outPacket);\n        System.out.println(\"Infos Envoyées\");\n        System.out.println(\"===== Fin d'envoi =====\");\n        senderSock.close();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/NetworkSender.java b/src/main/java/NetworkSender.java
--- a/src/main/java/NetworkSender.java	
+++ b/src/main/java/NetworkSender.java	
@@ -7,6 +7,7 @@
     private final DatagramSocket senderSock;
     Gson gson= new Gson();
     private final byte[] broadcastAddr= {10,32,(byte)47, (byte) 255};
+	private String broad = "10.1.255.255" ; 
     NetworkSender(User infos,Types.UDPMode mode) throws SocketException {
             senderSock = new DatagramSocket();
             senderSock.setBroadcast(true);
@@ -32,7 +33,7 @@
         System.out.println("===== Phase d'envoi =====");
         String user = gson.toJson(usr);
         String msg =gson.toJson( new NetworkMessage(Types.UDPMode.UserInfos, user));
-        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByAddress(broadcastAddr), 1234);
+        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByName(broad), 1234);
         System.out.println("Envoi des infos");
         senderSock.send(outPacket);
         System.out.println("Infos Envoyées");
@@ -43,7 +44,7 @@
 
         System.out.println("===== Phase d'envoi =====");
         String msg =gson.toJson( new NetworkMessage(Types.UDPMode.Nickname, gson.toJson(usr)));
-        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByAddress(broadcastAddr), 1234);
+        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByName(broad), 1234);
         System.out.println("Envoi des infos");
         senderSock.send(outPacket);
         System.out.println("Infos Envoyées");
@@ -53,7 +54,7 @@
     public void Disconnect(User usr) throws IOException {
         System.out.println("===== Phase d'envoi =====");
         String msg =gson.toJson( new NetworkMessage(Types.UDPMode.Disconnect, gson.toJson(usr)));
-        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByAddress(broadcastAddr), 1234);
+        DatagramPacket outPacket = new DatagramPacket(msg.getBytes(),msg.length(),InetAddress.getByName(broad), 1234);
         System.out.println("Envoi des infos");
         senderSock.send(outPacket);
         System.out.println("Infos Envoyées");
